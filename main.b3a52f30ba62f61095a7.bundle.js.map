{"version":3,"file":"main.b3a52f30ba62f61095a7.bundle.js","sources":["webpack:///./projects/next-three-state-checkbox/src/lib/components/next-three-state-checkbox/next-three-state-checkbox.component.ts"],"sourcesContent":["import {\r\n  Component,\r\n  Input,\r\n  forwardRef,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ElementRef,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\nlet counter = 0;\r\n\r\nexport enum ThreeStateCheckboxStatesEnum {\r\n  OFF,\r\n  INDETERMINATE,\r\n  ON,\r\n}\r\n\r\n@Component({\r\n  selector: 'next-three-state-checkbox',\r\n  template: require('./next-three-state-checkbox.component.html'),\r\n  styles: [require('./next-three-state-checkbox.component.scss')],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NextThreeStateCheckboxComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class NextThreeStateCheckboxComponent implements ControlValueAccessor, AfterViewInit {\r\n  public get inputId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  public get checked(): number {\r\n    return this.isChecked;\r\n  }\r\n\r\n  public set checked(checked: number) {\r\n    if (checked !== this.checked) {\r\n      this.isChecked = checked;\r\n      this.indeterminate = checked === ThreeStateCheckboxStatesEnum.INDETERMINATE;\r\n      this.renderCheckbox();\r\n    }\r\n  }\r\n  @Input() public disabled: boolean;\r\n  @Input() public required: boolean;\r\n  @Input() public tabIndex: number;\r\n  @Input() public id = `next-three-state-checkbox-${++counter}`;\r\n\r\n  @ViewChild('input') public inputCheckbox: ElementRef;\r\n\r\n  public indeterminate = false;\r\n\r\n  private isChecked = 0;\r\n\r\n  constructor(private changeDetectorRef: ChangeDetectorRef, private render: Renderer2, private el: ElementRef) {}\r\n\r\n  public ngAfterViewInit() {\r\n    this.render.removeAttribute(this.el.nativeElement, 'id');\r\n  }\r\n\r\n  public writeValue(value: number): void {\r\n    this.checked = value;\r\n  }\r\n\r\n  public registerOnChange(fn: (val?: any) => void): void {\r\n    this.controlValueAccessorChangeFn = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: (val?: any) => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  public onChange(): void {\r\n    this.setState((this.checked + 1) % 3);\r\n    this.controlValueAccessorChangeFn(this.checked);\r\n  }\r\n\r\n  protected controlValueAccessorChangeFn: (value: any) => void = () => null;\r\n  protected onTouched: (value: any) => void = () => null;\r\n\r\n  private renderCheckbox() {\r\n    this.inputCheckbox.nativeElement.indeterminate = this.indeterminate;\r\n    this.inputCheckbox.nativeElement.checked = this.checked === ThreeStateCheckboxStatesEnum.ON;\r\n    this.inputCheckbox.nativeElement.value = this.checked === ThreeStateCheckboxStatesEnum.ON;\r\n  }\r\n\r\n  private setState(value: ThreeStateCheckboxStatesEnum) {\r\n    this.checked = value;\r\n  }\r\n}\r\n"],"mappings":"AAcA","sourceRoot":""}